=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class LogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns audit log items for the cluster.
    # Returns a list of audit log items. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<AuditLogItemOld>]
    def audit_logs_get(opts = {})
      data, status_code, headers = audit_logs_get_with_http_info(opts)
      return data
    end

    # Returns audit log items for the cluster.
    # Returns a list of audit log items. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Array<AuditLogItemOld>, Fixnum, Hash)>] Array<AuditLogItemOld> data, response status code and response headers
    def audit_logs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogsApi#audit_logs_get ..."
      end
      
      # resource path
      local_var_path = "/audit_logs".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AuditLogItemOld>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#audit_logs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Streams logs for the specified channel.
    # 
    # @param channel TBD
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [nil]
    def logs_channel_get(channel, opts = {})
      logs_channel_get_with_http_info(channel, opts)
      return nil
    end

    # Streams logs for the specified channel.
    # 
    # @param channel TBD
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def logs_channel_get_with_http_info(channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LogsApi#logs_channel_get ..."
      end
      
      # verify the required parameter 'channel' is set
      fail "Missing the required parameter 'channel' when calling logs_channel_get" if channel.nil?
      
      # resource path
      local_var_path = "/logs/{channel}".sub('{format}','json').sub('{' + 'channel' + '}', channel.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#logs_channel_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
