=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class UtilitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Downloads the APC utility.
    # Downloads the APC command-line utility for the specified platform.
    # @param platform Target platform. Can be one of the following values: \n * `linux` \n * `osx` \n * `linux_amd64` \n * `osx_amd64` \n * `darwin_amd64` \n * `darwin`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [nil]
    def apc_download_platform_get(platform, opts = {})
      apc_download_platform_get_with_http_info(platform, opts)
      return nil
    end

    # Downloads the APC utility.
    # Downloads the APC command-line utility for the specified platform.
    # @param platform Target platform. Can be one of the following values: \n * `linux` \n * `osx` \n * `linux_amd64` \n * `osx_amd64` \n * `darwin_amd64` \n * `darwin`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apc_download_platform_get_with_http_info(platform, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi#apc_download_platform_get ..."
      end
      
      # verify the required parameter 'platform' is set
      fail "Missing the required parameter 'platform' when calling apc_download_platform_get" if platform.nil?
      unless ['linux_amd64', 'linux', 'osx_amd64', 'darwin_amd64', 'darwin', 'osx'].include?(platform)
        fail "invalid value for 'platform', must be one of linux_amd64, linux, osx_amd64, darwin_amd64, darwin, osx"
      end
      
      # resource path
      local_var_path = "/apc/download/{platform}".sub('{format}','json').sub('{' + 'platform' + '}', platform.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#apc_download_platform_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the version of APC available for download.
    # Returns the version of APC available for download from the cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [APCVersionObject]
    def apc_version_get(opts = {})
      data, status_code, headers = apc_version_get_with_http_info(opts)
      return data
    end

    # Returns the version of APC available for download.
    # Returns the version of APC available for download from the cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(APCVersionObject, Fixnum, Hash)>] APCVersionObject data, response status code and response headers
    def apc_version_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi#apc_version_get ..."
      end
      
      # resource path
      local_var_path = "/apc/version".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APCVersionObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#apc_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the API server.
    # Returns information about the API server.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Info]
    def info_get(opts = {})
      data, status_code, headers = info_get_with_http_info(opts)
      return data
    end

    # Returns information about the API server.
    # Returns information about the API server.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Info, Fixnum, Hash)>] Info data, response status code and response headers
    def info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi#info_get ..."
      end
      
      # resource path
      local_var_path = "/info".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Info')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the default namespace for the currently logged-in user.
    # Returns the default namespace for the currently logged-in user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Namespace]
    def namespace_default_get(opts = {})
      data, status_code, headers = namespace_default_get_with_http_info(opts)
      return data
    end

    # Returns the default namespace for the currently logged-in user.
    # Returns the default namespace for the currently logged-in user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Namespace, Fixnum, Hash)>] Namespace data, response status code and response headers
    def namespace_default_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi#namespace_default_get ..."
      end
      
      # resource path
      local_var_path = "/namespace/default".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Namespace')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#namespace_default_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists supported workload runtimes.
    # Lists file names and patterns used by APC to determine the appropriate staging pipeline to stage a given workload.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<Runtime>]
    def runtimes_get(opts = {})
      data, status_code, headers = runtimes_get_with_http_info(opts)
      return data
    end

    # Lists supported workload runtimes.
    # Lists file names and patterns used by APC to determine the appropriate staging pipeline to stage a given workload.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Array<Runtime>, Fixnum, Hash)>] Array<Runtime> data, response status code and response headers
    def runtimes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi#runtimes_get ..."
      end
      
      # resource path
      local_var_path = "/runtimes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Runtime>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#runtimes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the version number of the API Server.
    # Returns the version number of the API Server.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [InlineResponse200]
    def version_get(opts = {})
      data, status_code, headers = version_get_with_http_info(opts)
      return data
    end

    # Returns the version number of the API Server.
    # Returns the version number of the API Server.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def version_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi#version_get ..."
      end
      
      # resource path
      local_var_path = "/version".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
