=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class ServicesAndBindingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a new binding between a job and a service, or between two jobs (a job link).
    # 
    # @param binding An object that defines the properties of the new binding.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Binding]
    def bindings_post(binding, opts = {})
      data, status_code, headers = bindings_post_with_http_info(binding, opts)
      return data
    end

    # Creates a new binding between a job and a service, or between two jobs (a job link).
    # 
    # @param binding An object that defines the properties of the new binding.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Binding, Fixnum, Hash)>] Binding data, response status code and response headers
    def bindings_post_with_http_info(binding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServicesAndBindingsApi#bindings_post ..."
      end
      
      # verify the required parameter 'binding' is set
      fail "Missing the required parameter 'binding' when calling bindings_post" if binding.nil?
      
      # resource path
      local_var_path = "/bindings".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(binding)
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Binding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesAndBindingsApi#bindings_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists available services.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<Service>]
    def services_get(opts = {})
      data, status_code, headers = services_get_with_http_info(opts)
      return data
    end

    # Lists available services.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Array<Service>, Fixnum, Hash)>] Array<Service> data, response status code and response headers
    def services_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServicesAndBindingsApi#services_get ..."
      end
      
      # resource path
      local_var_path = "/services".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Service>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesAndBindingsApi#services_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new service.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [ServiceRequestObject] :service_request Describes the service to create.
    # @return [Service]
    def services_post(opts = {})
      data, status_code, headers = services_post_with_http_info(opts)
      return data
    end

    # Creates a new service.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @option opts [ServiceRequestObject] :service_request Describes the service to create.
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def services_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServicesAndBindingsApi#services_post ..."
      end
      
      # resource path
      local_var_path = "/services".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'service_request'])
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesAndBindingsApi#services_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified service.
    # 
    # @param uuid UUID of the service.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [nil]
    def services_uuid_delete(uuid, opts = {})
      services_uuid_delete_with_http_info(uuid, opts)
      return nil
    end

    # Deletes the specified service.
    # 
    # @param uuid UUID of the service.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def services_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServicesAndBindingsApi#services_uuid_delete ..."
      end
      
      # verify the required parameter 'uuid' is set
      fail "Missing the required parameter 'uuid' when calling services_uuid_delete" if uuid.nil?
      
      # resource path
      local_var_path = "/services/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesAndBindingsApi#services_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a service binding from a job.
    # Removes a service binding from a job.
    # @param job An object that specifies the job and service to unbind.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [nil]
    def unbind_post(job, opts = {})
      unbind_post_with_http_info(job, opts)
      return nil
    end

    # Removes a service binding from a job.
    # Removes a service binding from a job.
    # @param job An object that specifies the job and service to unbind.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unbind_post_with_http_info(job, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServicesAndBindingsApi#unbind_post ..."
      end
      
      # verify the required parameter 'job' is set
      fail "Missing the required parameter 'job' when calling unbind_post" if job.nil?
      
      # resource path
      local_var_path = "/unbind".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(job)
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesAndBindingsApi#unbind_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
