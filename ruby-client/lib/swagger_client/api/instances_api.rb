=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class InstancesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns a list of instance managers.
    # Returns a list of instance managers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<InstanceManager>]
    def instance_managers_get(opts = {})
      data, status_code, headers = instance_managers_get_with_http_info(opts)
      return data
    end

    # Returns a list of instance managers.
    # Returns a list of instance managers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Array<InstanceManager>, Fixnum, Hash)>] Array<InstanceManager> data, response status code and response headers
    def instance_managers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstancesApi#instance_managers_get ..."
      end
      
      # resource path
      local_var_path = "/instance_managers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InstanceManager>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#instance_managers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns details for the specified instance manager.
    # Returns details for the specified instance manager.
    # @param uuid UUID of the instance manager to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [InstanceManager]
    def instance_managers_uuid_get(uuid, opts = {})
      data, status_code, headers = instance_managers_uuid_get_with_http_info(uuid, opts)
      return data
    end

    # Returns details for the specified instance manager.
    # Returns details for the specified instance manager.
    # @param uuid UUID of the instance manager to retrieve details for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(InstanceManager, Fixnum, Hash)>] InstanceManager data, response status code and response headers
    def instance_managers_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstancesApi#instance_managers_uuid_get ..."
      end
      
      # verify the required parameter 'uuid' is set
      fail "Missing the required parameter 'uuid' when calling instance_managers_uuid_get" if uuid.nil?
      
      # resource path
      local_var_path = "/instance_managers/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstanceManager')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#instance_managers_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of instances managed by the specified instance manager.
    # Returns a list of instances managed by the specified instance manager.
    # @param uuid UUID of the instance manager whose instances should be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<Instances>]
    def instance_managers_uuid_instances_get(uuid, opts = {})
      data, status_code, headers = instance_managers_uuid_instances_get_with_http_info(uuid, opts)
      return data
    end

    # Returns a list of instances managed by the specified instance manager.
    # Returns a list of instances managed by the specified instance manager.
    # @param uuid UUID of the instance manager whose instances should be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(Array<Instances>, Fixnum, Hash)>] Array<Instances> data, response status code and response headers
    def instance_managers_uuid_instances_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstancesApi#instance_managers_uuid_instances_get ..."
      end
      
      # verify the required parameter 'uuid' is set
      fail "Missing the required parameter 'uuid' when calling instance_managers_uuid_instances_get" if uuid.nil?
      
      # resource path
      local_var_path = "/instance_managers/{uuid}/instances".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Instances>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#instance_managers_uuid_instances_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a snapshot of a capsule.
    # 
    # @param uuid UUID of the job from which to create the capsule.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [nil]
    def instances_uuid_snapshot_post(uuid, opts = {})
      instances_uuid_snapshot_post_with_http_info(uuid, opts)
      return nil
    end

    # Creates a snapshot of a capsule.
    # 
    # @param uuid UUID of the job from which to create the capsule.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def instances_uuid_snapshot_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstancesApi#instances_uuid_snapshot_post ..."
      end
      
      # verify the required parameter 'uuid' is set
      fail "Missing the required parameter 'uuid' when calling instances_uuid_snapshot_post" if uuid.nil?
      
      # resource path
      local_var_path = "/instances/{uuid}/snapshot".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#instances_uuid_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all tags on all instance managers in the cluster. 
    # Lists all tags on all instance managers in the cluster. Requires `read` privileges on the `cluster` realm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [nil]
    def tags_get(opts = {})
      tags_get_with_http_info(opts)
      return nil
    end

    # Lists all tags on all instance managers in the cluster. 
    # Lists all tags on all instance managers in the cluster. Requires `read` privileges on the `cluster` realm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def tags_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InstancesApi#tags_get ..."
      end
      
      # resource path
      local_var_path = "/tags".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
