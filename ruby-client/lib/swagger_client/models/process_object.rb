=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class ProcessObject
    # An optional list of environment values to attach to the process within the job.
    attr_accessor :environment

    # Name of the group used to run the process within a container. An empty string lets the the instance manager choose a group.
    attr_accessor :group

    # Start the process in \"heavy\" mode: giving it pid 1.  Only one process within the job can set this flag to true.
    attr_accessor :heavy

    # The command used to start the process within the container's isolation context.
    attr_accessor :start_command

    # The command used to start the process, specified as an array. The first element in the array is the command/binary to execute, and subsequent array elements are command arguments. The expanded command string is passed directly to `exec()` without shell or template interpretation.  If `start_command_raw` is provided then `start_command`, if specified, is ignored. This property is typically used with exact processes that have an extremely well-known start command. 
    attr_accessor :start_command_raw

    # The number of seconds that the system will wait for startup to complete. This includes the time that it will take for ports to become available.
    attr_accessor :start_command_timeout

    # The command used to stop the process within the container's isolation context. If not defined, OS-level signals (like `TERM`) may be used to shut down the process.
    attr_accessor :stop_command

    # The command used to stop the process, specified as an array. The first element in the array is the command/binary to execute, and subsequent array elements are command arguments. The expanded command string is passed directly to `exec()` without shell or template interpretation.  If `stop_command_raw` is provided then `stop_command`, if specified, is ignored. This property is typically used with exact processes that have an extremely well-known start command. 
    attr_accessor :stop_command_raw

    # The number of seconds to give the process after `stop_command` has been run before forcing the command to shutdown via OS-level signals, such as `TERM`. If no `stop_command` is provided for the process, OS-level signals (like `TERM`) may be used to terminate the process.
    attr_accessor :stop_timeout

    # Name of the user used to run the process within a container. An empty string lets the the instance manager choose a user.
    attr_accessor :user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'environment' => :'environment',
        
        :'group' => :'group',
        
        :'heavy' => :'heavy',
        
        :'start_command' => :'start_command',
        
        :'start_command_raw' => :'start_command_raw',
        
        :'start_command_timeout' => :'start_command_timeout',
        
        :'stop_command' => :'stop_command',
        
        :'stop_command_raw' => :'stop_command_raw',
        
        :'stop_timeout' => :'stop_timeout',
        
        :'user' => :'user'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'environment' => :'Hash<String, String>',
        :'group' => :'String',
        :'heavy' => :'BOOLEAN',
        :'start_command' => :'String',
        :'start_command_raw' => :'Array<String>',
        :'start_command_timeout' => :'Integer',
        :'stop_command' => :'String',
        :'stop_command_raw' => :'Array<String>',
        :'stop_timeout' => :'Integer',
        :'user' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'environment']
        if (value = attributes[:'environment']).is_a?(Array)
          self.environment = value
        end
      end
      
      if attributes[:'group']
        self.group = attributes[:'group']
      end
      
      if attributes[:'heavy']
        self.heavy = attributes[:'heavy']
      end
      
      if attributes[:'start_command']
        self.start_command = attributes[:'start_command']
      end
      
      if attributes[:'start_command_raw']
        if (value = attributes[:'start_command_raw']).is_a?(Array)
          self.start_command_raw = value
        end
      end
      
      if attributes[:'start_command_timeout']
        self.start_command_timeout = attributes[:'start_command_timeout']
      end
      
      if attributes[:'stop_command']
        self.stop_command = attributes[:'stop_command']
      end
      
      if attributes[:'stop_command_raw']
        if (value = attributes[:'stop_command_raw']).is_a?(Array)
          self.stop_command_raw = value
        end
      end
      
      if attributes[:'stop_timeout']
        self.stop_timeout = attributes[:'stop_timeout']
      end
      
      if attributes[:'user']
        self.user = attributes[:'user']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          environment == o.environment &&
          group == o.group &&
          heavy == o.heavy &&
          start_command == o.start_command &&
          start_command_raw == o.start_command_raw &&
          start_command_timeout == o.start_command_timeout &&
          stop_command == o.stop_command &&
          stop_command_raw == o.stop_command_raw &&
          stop_timeout == o.stop_timeout &&
          user == o.user
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [environment, group, heavy, start_command, start_command_raw, start_command_timeout, stop_command, stop_command_raw, stop_timeout, user].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
