=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class InstanceManager
    attr_accessor :resources_provisioned

    attr_accessor :resources_total

    # 
    attr_accessor :datacenter

    # Instance manager's host name.
    attr_accessor :hostname

    # The number of instances being managed by the instance manager.
    attr_accessor :num_instances

    # Date and time that instance manager was started.
    attr_accessor :start_time

    # System tags assigned to the instance manager.
    attr_accessor :system_tags

    # Tags assigned to the instance manager.
    attr_accessor :tags

    # Instance manager's unique identifier.
    attr_accessor :uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'resources_provisioned' => :'ResourcesProvisioned',
        
        :'resources_total' => :'ResourcesTotal',
        
        :'datacenter' => :'datacenter',
        
        :'hostname' => :'hostname',
        
        :'num_instances' => :'num_instances',
        
        :'start_time' => :'start_time',
        
        :'system_tags' => :'system_tags',
        
        :'tags' => :'tags',
        
        :'uuid' => :'uuid'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'resources_provisioned' => :'Resource',
        :'resources_total' => :'Resource',
        :'datacenter' => :'String',
        :'hostname' => :'String',
        :'num_instances' => :'Integer',
        :'start_time' => :'String',
        :'system_tags' => :'Array<String>',
        :'tags' => :'Array<String>',
        :'uuid' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'ResourcesProvisioned']
        self.resources_provisioned = attributes[:'ResourcesProvisioned']
      end
      
      if attributes[:'ResourcesTotal']
        self.resources_total = attributes[:'ResourcesTotal']
      end
      
      if attributes[:'datacenter']
        self.datacenter = attributes[:'datacenter']
      end
      
      if attributes[:'hostname']
        self.hostname = attributes[:'hostname']
      end
      
      if attributes[:'num_instances']
        self.num_instances = attributes[:'num_instances']
      end
      
      if attributes[:'start_time']
        self.start_time = attributes[:'start_time']
      end
      
      if attributes[:'system_tags']
        if (value = attributes[:'system_tags']).is_a?(Array)
          self.system_tags = value
        end
      end
      
      if attributes[:'tags']
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
      
      if attributes[:'uuid']
        self.uuid = attributes[:'uuid']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          resources_provisioned == o.resources_provisioned &&
          resources_total == o.resources_total &&
          datacenter == o.datacenter &&
          hostname == o.hostname &&
          num_instances == o.num_instances &&
          start_time == o.start_time &&
          system_tags == o.system_tags &&
          tags == o.tags &&
          uuid == o.uuid
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [resources_provisioned, resources_total, datacenter, hostname, num_instances, start_time, system_tags, tags, uuid].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
