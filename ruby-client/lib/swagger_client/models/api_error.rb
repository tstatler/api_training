=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class APIError
    # If `true`, the error was due to a client-side error (e.g., invalid data); otherwise, the error was due to a server-side error (e.g. a NATS timeout).
    attr_accessor :client_side

    # HTTP status code returned to the user.
    attr_accessor :code

    # If `true`, the resource that's being sought already exists.
    attr_accessor :duplicate_key

    # If `true`, the action was fatal and should not be retried.
    attr_accessor :fatal

    # Error message string.
    attr_accessor :message

    # A list of missing policy claim(s) on policy denials.
    attr_accessor :missing_claims

    attr_accessor :policy_error

    # ID of the NATS message or HTTP request that generated the error.
    attr_accessor :request_id

    # If `true`, the request cannot be processed due to a conflict.
    attr_accessor :request_invalid

    # If `true`, the targeted resource is in a state where the request cannot be fulfilled; for instance, a job in the `started` state may not have its resources changed.
    attr_accessor :requires_restart

    # If `true`, the requested resource could not be located.
    attr_accessor :resource_missing

    # If `true`, the problem encountered was transient, and the same payload can be delivered again.
    attr_accessor :_retry

    # If `true`, the requestor's token was invalid (e.g., due to a timeout.)
    attr_accessor :token_invalid

    # Specifies the amount of time in milliseconds that the client should wait before retrying the request.
    attr_accessor :try_again_in_ms

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'client_side' => :'client_side',
        
        :'code' => :'code',
        
        :'duplicate_key' => :'duplicate_key',
        
        :'fatal' => :'fatal',
        
        :'message' => :'message',
        
        :'missing_claims' => :'missing_claims',
        
        :'policy_error' => :'policy_error',
        
        :'request_id' => :'request_id',
        
        :'request_invalid' => :'request_invalid',
        
        :'requires_restart' => :'requires_restart',
        
        :'resource_missing' => :'resource_missing',
        
        :'_retry' => :'retry',
        
        :'token_invalid' => :'token_invalid',
        
        :'try_again_in_ms' => :'try_again_in_ms'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'client_side' => :'BOOLEAN',
        :'code' => :'Integer',
        :'duplicate_key' => :'BOOLEAN',
        :'fatal' => :'BOOLEAN',
        :'message' => :'String',
        :'missing_claims' => :'Array<String>',
        :'policy_error' => :'PolicyError',
        :'request_id' => :'String',
        :'request_invalid' => :'BOOLEAN',
        :'requires_restart' => :'BOOLEAN',
        :'resource_missing' => :'BOOLEAN',
        :'_retry' => :'BOOLEAN',
        :'token_invalid' => :'BOOLEAN',
        :'try_again_in_ms' => :'Integer'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'client_side']
        self.client_side = attributes[:'client_side']
      end
      
      if attributes[:'code']
        self.code = attributes[:'code']
      end
      
      if attributes[:'duplicate_key']
        self.duplicate_key = attributes[:'duplicate_key']
      end
      
      if attributes[:'fatal']
        self.fatal = attributes[:'fatal']
      end
      
      if attributes[:'message']
        self.message = attributes[:'message']
      end
      
      if attributes[:'missing_claims']
        if (value = attributes[:'missing_claims']).is_a?(Array)
          self.missing_claims = value
        end
      end
      
      if attributes[:'policy_error']
        self.policy_error = attributes[:'policy_error']
      end
      
      if attributes[:'request_id']
        self.request_id = attributes[:'request_id']
      end
      
      if attributes[:'request_invalid']
        self.request_invalid = attributes[:'request_invalid']
      end
      
      if attributes[:'requires_restart']
        self.requires_restart = attributes[:'requires_restart']
      end
      
      if attributes[:'resource_missing']
        self.resource_missing = attributes[:'resource_missing']
      end
      
      if attributes[:'retry']
        self._retry = attributes[:'retry']
      end
      
      if attributes[:'token_invalid']
        self.token_invalid = attributes[:'token_invalid']
      end
      
      if attributes[:'try_again_in_ms']
        self.try_again_in_ms = attributes[:'try_again_in_ms']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_side == o.client_side &&
          code == o.code &&
          duplicate_key == o.duplicate_key &&
          fatal == o.fatal &&
          message == o.message &&
          missing_claims == o.missing_claims &&
          policy_error == o.policy_error &&
          request_id == o.request_id &&
          request_invalid == o.request_invalid &&
          requires_restart == o.requires_restart &&
          resource_missing == o.resource_missing &&
          _retry == o._retry &&
          token_invalid == o.token_invalid &&
          try_again_in_ms == o.try_again_in_ms
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [client_side, code, duplicate_key, fatal, message, missing_claims, policy_error, request_id, request_invalid, requires_restart, resource_missing, _retry, token_invalid, try_again_in_ms].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
