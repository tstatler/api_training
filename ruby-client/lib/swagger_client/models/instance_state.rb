=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class InstanceState
    # Number of instances where the job was started and is about to move into the `RUNNING` state.
    attr_accessor :first_running

    # Number of instances in the `NEW` state.
    attr_accessor :new

    # Number of instances that are no longer consuming resources and have no remaining configuration on the system.
    attr_accessor :removed

    # Number of instances that are running.
    attr_accessor :running

    # Number of instances in which packages are being installed, networking initialized, etc.
    attr_accessor :setup

    # Number of instances whose processes have been started, but have not been verified to be running.
    attr_accessor :starting

    # Number of instances that are waiting for dependent jobs to become ready.
    attr_accessor :starting_wait

    # Number of instances that are in the process of having their processes shutdown.
    attr_accessor :stopping

    # Number of instances that are being stopped, but have jobs depending on it. In this case the other jobs must first transition past the `STOPPING` state before this instance can be stopped.
    attr_accessor :stopping_wait

    # Number of instances whose user-defined processes have been killed, and the instance is being removed from cluster resources.
    attr_accessor :teardown

    # Number of instances that are in a state that allows the instance to update various properties of the container.
    attr_accessor :updating

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'first_running' => :'FIRST_RUNNING',
        
        :'new' => :'NEW',
        
        :'removed' => :'REMOVED',
        
        :'running' => :'RUNNING',
        
        :'setup' => :'SETUP',
        
        :'starting' => :'STARTING',
        
        :'starting_wait' => :'STARTING_WAIT',
        
        :'stopping' => :'STOPPING',
        
        :'stopping_wait' => :'STOPPING_WAIT',
        
        :'teardown' => :'TEARDOWN',
        
        :'updating' => :'UPDATING'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'first_running' => :'Integer',
        :'new' => :'Integer',
        :'removed' => :'Integer',
        :'running' => :'Integer',
        :'setup' => :'Integer',
        :'starting' => :'Integer',
        :'starting_wait' => :'Integer',
        :'stopping' => :'Integer',
        :'stopping_wait' => :'Integer',
        :'teardown' => :'Integer',
        :'updating' => :'Integer'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'FIRST_RUNNING']
        self.first_running = attributes[:'FIRST_RUNNING']
      end
      
      if attributes[:'NEW']
        self.new = attributes[:'NEW']
      end
      
      if attributes[:'REMOVED']
        self.removed = attributes[:'REMOVED']
      end
      
      if attributes[:'RUNNING']
        self.running = attributes[:'RUNNING']
      end
      
      if attributes[:'SETUP']
        self.setup = attributes[:'SETUP']
      end
      
      if attributes[:'STARTING']
        self.starting = attributes[:'STARTING']
      end
      
      if attributes[:'STARTING_WAIT']
        self.starting_wait = attributes[:'STARTING_WAIT']
      end
      
      if attributes[:'STOPPING']
        self.stopping = attributes[:'STOPPING']
      end
      
      if attributes[:'STOPPING_WAIT']
        self.stopping_wait = attributes[:'STOPPING_WAIT']
      end
      
      if attributes[:'TEARDOWN']
        self.teardown = attributes[:'TEARDOWN']
      end
      
      if attributes[:'UPDATING']
        self.updating = attributes[:'UPDATING']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first_running == o.first_running &&
          new == o.new &&
          removed == o.removed &&
          running == o.running &&
          setup == o.setup &&
          starting == o.starting &&
          starting_wait == o.starting_wait &&
          stopping == o.stopping &&
          stopping_wait == o.stopping_wait &&
          teardown == o.teardown &&
          updating == o.updating
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [first_running, new, removed, running, setup, starting, starting_wait, stopping, stopping_wait, teardown, updating].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
