=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class TaskEvent
    # Extra information about the TaskEvent.
    attr_accessor :payload

    # A logical grouping of subtasks. A stage could be \"Creating Job\" or \"Downloading Packages\".
    attr_accessor :stage

    # A description of the sub-task that this TaskEvent describes.
    attr_accessor :subtask

    # An list of tags that provide a hint about what is being tracked.
    attr_accessor :tags

    # The type of message this TaskEvent contains.
    attr_accessor :task_event_type

    # UUID of the Task that stores this event.
    attr_accessor :task_uuid

    # Represents a logically independent procedure within a Task. For instance, a thread could be \"job1\" or \"job2\", or \"Link job1 and job2\".
    attr_accessor :thread

    # Time in UNIX nanoseconds immediately before the TaskEvent gets announced on NATS.
    attr_accessor :time

    # UUID of the Task that stores this event.
    attr_accessor :uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'payload' => :'payload',
        
        :'stage' => :'stage',
        
        :'subtask' => :'subtask',
        
        :'tags' => :'tags',
        
        :'task_event_type' => :'task_event_type',
        
        :'task_uuid' => :'task_uuid',
        
        :'thread' => :'thread',
        
        :'time' => :'time',
        
        :'uuid' => :'uuid'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'payload' => :'Hash<String, String>',
        :'stage' => :'String',
        :'subtask' => :'SubTask',
        :'tags' => :'Array<String>',
        :'task_event_type' => :'String',
        :'task_uuid' => :'String',
        :'thread' => :'String',
        :'time' => :'Integer',
        :'uuid' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'payload']
        if (value = attributes[:'payload']).is_a?(Array)
          self.payload = value
        end
      end
      
      if attributes[:'stage']
        self.stage = attributes[:'stage']
      end
      
      if attributes[:'subtask']
        self.subtask = attributes[:'subtask']
      end
      
      if attributes[:'tags']
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
      
      if attributes[:'task_event_type']
        self.task_event_type = attributes[:'task_event_type']
      end
      
      if attributes[:'task_uuid']
        self.task_uuid = attributes[:'task_uuid']
      end
      
      if attributes[:'thread']
        self.thread = attributes[:'thread']
      end
      
      if attributes[:'time']
        self.time = attributes[:'time']
      end
      
      if attributes[:'uuid']
        self.uuid = attributes[:'uuid']
      end
      
    end

    # Custom attribute writer method checking allowed values (enum).
    def task_event_type=(task_event_type)
      allowed_values = ["event", "error", "eos", "disconnect", "cancel"]
      if task_event_type && !allowed_values.include?(task_event_type)
        fail "invalid value for 'task_event_type', must be one of #{allowed_values}"
      end
      @task_event_type = task_event_type
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payload == o.payload &&
          stage == o.stage &&
          subtask == o.subtask &&
          tags == o.tags &&
          task_event_type == o.task_event_type &&
          task_uuid == o.task_uuid &&
          thread == o.thread &&
          time == o.time &&
          uuid == o.uuid
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [payload, stage, subtask, tags, task_event_type, task_uuid, thread, time, uuid].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
