=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class Job
    # A list of service bindings associated with the job.
    attr_accessor :bindings

    # Time at which the job was created.
    attr_accessor :created_at

    # The principal name of user who created the job.
    attr_accessor :created_by

    # For jobs that run Docker images, specifies the Docker registry, image name and tag that were used to create the job. This field can't be changed after the job is created.
    attr_accessor :docker_origin

    # Job's fully-qualified name.
    attr_accessor :fqn

    # List of hard scheduling tags. See [Hard Tags](http://enterprise-docs.apcera.com/other/job-scheduling/#hard-tags) for more information.
    attr_accessor :hard_scheduling_tags

    # Indicates the health of the job. If empty then the job's health has not been retrieved from the health manager yet.
    attr_accessor :health

    # An array of logs the job will be producing that should be collected for aggregation or streaming.
    attr_accessor :logs

    # Name of the job.
    attr_accessor :name

    # An object that contains information about the [virtual network](#virtualnetwork) the job belongs to.
    attr_accessor :network_ref

    # The number of job instances currently running.
    attr_accessor :num_instances

    # Array of packages for this Job. Includes both user-specified packages and the packages calculated by the package manager.
    attr_accessor :packages

    # An array of ports associated with the job.
    attr_accessor :ports

    # A list of processes associated with the job.
    attr_accessor :processes

    # A list of compute and network resources that this job can consume.
    attr_accessor :resources

    # Configuration related to restarting the job.
    attr_accessor :restart

    # Configuration related to rolling updates of the job.
    attr_accessor :rollout

    # List of soft scheduling tags. See [Soft Tags](http://enterprise-docs.apcera.com/other/job-scheduling/#soft-tags) for more information.
    attr_accessor :soft_scheduling_tags

    # General state of this Job in the system.
    attr_accessor :state

    # Map of tags (arbitrary strings) to values.
    attr_accessor :tags

    # Time at which the job was most recently updated.
    attr_accessor :updated_at

    # The principal name of the last user to update the job.
    attr_accessor :updated_by

    # The job's unique identifier.
    attr_accessor :uuid

    # An auto-incremented number that indicates the revision of the object.
    attr_accessor :version_id

    # A job's weight is used to route requests to this job relative to other job that have the same routes. See [Sharing Routes and Route Weights](http://docs.apcera.com/jobs/routes/#about-route-weights).
    attr_accessor :weight

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'bindings' => :'bindings',
        
        :'created_at' => :'created_at',
        
        :'created_by' => :'created_by',
        
        :'docker_origin' => :'docker_origin',
        
        :'fqn' => :'fqn',
        
        :'hard_scheduling_tags' => :'hard_scheduling_tags',
        
        :'health' => :'health',
        
        :'logs' => :'logs',
        
        :'name' => :'name',
        
        :'network_ref' => :'network_ref',
        
        :'num_instances' => :'num_instances',
        
        :'packages' => :'packages',
        
        :'ports' => :'ports',
        
        :'processes' => :'processes',
        
        :'resources' => :'resources',
        
        :'restart' => :'restart',
        
        :'rollout' => :'rollout',
        
        :'soft_scheduling_tags' => :'soft_scheduling_tags',
        
        :'state' => :'state',
        
        :'tags' => :'tags',
        
        :'updated_at' => :'updated_at',
        
        :'updated_by' => :'updated_by',
        
        :'uuid' => :'uuid',
        
        :'version_id' => :'version_id',
        
        :'weight' => :'weight'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'bindings' => :'Hash<String, Binding>',
        :'created_at' => :'DateTime',
        :'created_by' => :'String',
        :'docker_origin' => :'DockerOrigin',
        :'fqn' => :'String',
        :'hard_scheduling_tags' => :'Hash<String, BOOLEAN>',
        :'health' => :'JobHealth',
        :'logs' => :'Array<Log>',
        :'name' => :'String',
        :'network_ref' => :'JobNetworkReference',
        :'num_instances' => :'Integer',
        :'packages' => :'Array<PackageInfo>',
        :'ports' => :'Array<Port>',
        :'processes' => :'Hash<String, Process>',
        :'resources' => :'Resource',
        :'restart' => :'RestartConfig',
        :'rollout' => :'RolloutConfig',
        :'soft_scheduling_tags' => :'Hash<String, BOOLEAN>',
        :'state' => :'String',
        :'tags' => :'Hash<String, String>',
        :'updated_at' => :'DateTime',
        :'updated_by' => :'String',
        :'uuid' => :'String',
        :'version_id' => :'Integer',
        :'weight' => :'Integer'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'bindings']
        if (value = attributes[:'bindings']).is_a?(Array)
          self.bindings = value
        end
      end
      
      if attributes[:'created_at']
        self.created_at = attributes[:'created_at']
      end
      
      if attributes[:'created_by']
        self.created_by = attributes[:'created_by']
      end
      
      if attributes[:'docker_origin']
        self.docker_origin = attributes[:'docker_origin']
      end
      
      if attributes[:'fqn']
        self.fqn = attributes[:'fqn']
      end
      
      if attributes[:'hard_scheduling_tags']
        if (value = attributes[:'hard_scheduling_tags']).is_a?(Array)
          self.hard_scheduling_tags = value
        end
      end
      
      if attributes[:'health']
        self.health = attributes[:'health']
      end
      
      if attributes[:'logs']
        if (value = attributes[:'logs']).is_a?(Array)
          self.logs = value
        end
      end
      
      if attributes[:'name']
        self.name = attributes[:'name']
      end
      
      if attributes[:'network_ref']
        self.network_ref = attributes[:'network_ref']
      end
      
      if attributes[:'num_instances']
        self.num_instances = attributes[:'num_instances']
      end
      
      if attributes[:'packages']
        if (value = attributes[:'packages']).is_a?(Array)
          self.packages = value
        end
      end
      
      if attributes[:'ports']
        if (value = attributes[:'ports']).is_a?(Array)
          self.ports = value
        end
      end
      
      if attributes[:'processes']
        if (value = attributes[:'processes']).is_a?(Array)
          self.processes = value
        end
      end
      
      if attributes[:'resources']
        self.resources = attributes[:'resources']
      end
      
      if attributes[:'restart']
        self.restart = attributes[:'restart']
      end
      
      if attributes[:'rollout']
        self.rollout = attributes[:'rollout']
      end
      
      if attributes[:'soft_scheduling_tags']
        if (value = attributes[:'soft_scheduling_tags']).is_a?(Array)
          self.soft_scheduling_tags = value
        end
      end
      
      if attributes[:'state']
        self.state = attributes[:'state']
      end
      
      if attributes[:'tags']
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
      
      if attributes[:'updated_at']
        self.updated_at = attributes[:'updated_at']
      end
      
      if attributes[:'updated_by']
        self.updated_by = attributes[:'updated_by']
      end
      
      if attributes[:'uuid']
        self.uuid = attributes[:'uuid']
      end
      
      if attributes[:'version_id']
        self.version_id = attributes[:'version_id']
      end
      
      if attributes[:'weight']
        self.weight = attributes[:'weight']
      end
      
    end

    # Custom attribute writer method checking allowed values (enum).
    def state=(state)
      allowed_values = ["invalid", "unknown", "created", "errored", "staging", "staging_failed", "ready", "started", "stopped", "finished"]
      if state && !allowed_values.include?(state)
        fail "invalid value for 'state', must be one of #{allowed_values}"
      end
      @state = state
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bindings == o.bindings &&
          created_at == o.created_at &&
          created_by == o.created_by &&
          docker_origin == o.docker_origin &&
          fqn == o.fqn &&
          hard_scheduling_tags == o.hard_scheduling_tags &&
          health == o.health &&
          logs == o.logs &&
          name == o.name &&
          network_ref == o.network_ref &&
          num_instances == o.num_instances &&
          packages == o.packages &&
          ports == o.ports &&
          processes == o.processes &&
          resources == o.resources &&
          restart == o.restart &&
          rollout == o.rollout &&
          soft_scheduling_tags == o.soft_scheduling_tags &&
          state == o.state &&
          tags == o.tags &&
          updated_at == o.updated_at &&
          updated_by == o.updated_by &&
          uuid == o.uuid &&
          version_id == o.version_id &&
          weight == o.weight
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [bindings, created_at, created_by, docker_origin, fqn, hard_scheduling_tags, health, logs, name, network_ref, num_instances, packages, ports, processes, resources, restart, rollout, soft_scheduling_tags, state, tags, updated_at, updated_by, uuid, version_id, weight].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
