=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  class Binding
    # List of environment variables generated for the binding.
    attr_accessor :env_var

    # The binding's fully-qualified name.
    attr_accessor :fqn

    # Fully-qualified name of the job that is bound to another job or service.
    attr_accessor :job_fqn

    # The base name of the binding.
    attr_accessor :name

    # A map of custom binding parameter names to their values.
    attr_accessor :parameters

    # Fully-qualified name of the provider used to create the service to which the source job is bound. Only relevant for job-to-service bindings.
    attr_accessor :provider_fqn

    # Fully-qualified name of a the service to which the source job is bound. Only relevant for for job-to-service bindings.
    attr_accessor :service_fqn

    # IP address where the connection to the target job should be exposed.
    attr_accessor :target_job_bound_ip

    # Port that the target job should be exposed at.
    attr_accessor :target_job_bound_port

    # Fully-qualified name of the job to which the source job wants to bind (input only).
    attr_accessor :target_job_fqn

    # Port on the target job that the source job wants to bind to.
    attr_accessor :target_job_port

    # UUID of the job to which the source job is bound (output only).
    attr_accessor :target_job_uuid

    # The binding's unique identifier.
    attr_accessor :uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'env_var' => :'env_var',
        
        :'fqn' => :'fqn',
        
        :'job_fqn' => :'job_fqn',
        
        :'name' => :'name',
        
        :'parameters' => :'parameters',
        
        :'provider_fqn' => :'provider_fqn',
        
        :'service_fqn' => :'service_fqn',
        
        :'target_job_bound_ip' => :'target_job_bound_ip',
        
        :'target_job_bound_port' => :'target_job_bound_port',
        
        :'target_job_fqn' => :'target_job_fqn',
        
        :'target_job_port' => :'target_job_port',
        
        :'target_job_uuid' => :'target_job_uuid',
        
        :'uuid' => :'uuid'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'env_var' => :'Array<String>',
        :'fqn' => :'String',
        :'job_fqn' => :'String',
        :'name' => :'String',
        :'parameters' => :'Hash<String, String>',
        :'provider_fqn' => :'String',
        :'service_fqn' => :'String',
        :'target_job_bound_ip' => :'String',
        :'target_job_bound_port' => :'String',
        :'target_job_fqn' => :'String',
        :'target_job_port' => :'String',
        :'target_job_uuid' => :'String',
        :'uuid' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'env_var']
        if (value = attributes[:'env_var']).is_a?(Array)
          self.env_var = value
        end
      end
      
      if attributes[:'fqn']
        self.fqn = attributes[:'fqn']
      end
      
      if attributes[:'job_fqn']
        self.job_fqn = attributes[:'job_fqn']
      end
      
      if attributes[:'name']
        self.name = attributes[:'name']
      end
      
      if attributes[:'parameters']
        if (value = attributes[:'parameters']).is_a?(Array)
          self.parameters = value
        end
      end
      
      if attributes[:'provider_fqn']
        self.provider_fqn = attributes[:'provider_fqn']
      end
      
      if attributes[:'service_fqn']
        self.service_fqn = attributes[:'service_fqn']
      end
      
      if attributes[:'target_job_bound_ip']
        self.target_job_bound_ip = attributes[:'target_job_bound_ip']
      end
      
      if attributes[:'target_job_bound_port']
        self.target_job_bound_port = attributes[:'target_job_bound_port']
      end
      
      if attributes[:'target_job_fqn']
        self.target_job_fqn = attributes[:'target_job_fqn']
      end
      
      if attributes[:'target_job_port']
        self.target_job_port = attributes[:'target_job_port']
      end
      
      if attributes[:'target_job_uuid']
        self.target_job_uuid = attributes[:'target_job_uuid']
      end
      
      if attributes[:'uuid']
        self.uuid = attributes[:'uuid']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          env_var == o.env_var &&
          fqn == o.fqn &&
          job_fqn == o.job_fqn &&
          name == o.name &&
          parameters == o.parameters &&
          provider_fqn == o.provider_fqn &&
          service_fqn == o.service_fqn &&
          target_job_bound_ip == o.target_job_bound_ip &&
          target_job_bound_port == o.target_job_bound_port &&
          target_job_fqn == o.target_job_fqn &&
          target_job_port == o.target_job_port &&
          target_job_uuid == o.target_job_uuid &&
          uuid == o.uuid
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [env_var, fqn, job_fqn, name, parameters, provider_fqn, service_fqn, target_job_bound_ip, target_job_bound_port, target_job_fqn, target_job_port, target_job_uuid, uuid].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
