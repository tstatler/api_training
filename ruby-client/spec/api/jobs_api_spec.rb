=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::JobsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'JobsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::JobsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of JobsApi' do
    it 'should create an instact of JobsApi' do
      @instance.should be_a(SwaggerClient::JobsApi)
    end
  end

  # unit tests for bindings_post
  # Creates a new binding between a job and a service, or between two jobs (a job link).
  # 
  # @param binding An object that defines the properties of the new binding.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Binding]
  describe 'bindings_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for docker_job_check
  # Checks a Docker job before creation to see if it will be allowed by docker.allow policy.
  # Checks a Docker job before creation to see if it will be allowed by [docker.allow policy](http://docs.apcera.com/policy/examples/docker/#docker-image-whitelisting).
  # @param job The job object to check.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'docker_job_check test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for docker_jobs_post
  # Creates a new job from a Docker image.
  # Downloads a Docker image from a registry and creates a job to run it.
  # @param job Docker job object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [CreateDockerJobResponse]
  describe 'docker_jobs_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_get
  # List jobs.
  # Returns a list of jobs, optionally filtered by one or more query parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [Array<String>] :tag List of tags. Only jobs with the specified tags are returned.
  # @option opts [Array<String>] :ids List of job UUIDs. Only jobs with the specified UUIDs are returned.
  # @option opts [String] :name Local name of job(s) to return.
  # @option opts [String] :fqn FQN of job to return.
  # @option opts [String] :match_partial_fqn If `true`, jobs that partially match the specified FQN are returned.
  # @option opts [String] :package_id Return jobs that use the package specified by UUID.
  # @option opts [String] :binding_fqn Filter jobs with a specific binding FQN.
  # @option opts [String] :provider_fqn Return jobs bound to services on the specified provider.
  # @option opts [String] :service_fqn Return jobs bound to the specified service.
  # @option opts [String] :count Limits the number of jobs returned in the response. By default, all jobs are returned.
  # @option opts [String] :page Specifies the number of the results page to fetch. By default, the first page of results is returned.
  # @option opts [String] :health If `true`, the response includes health metrics for the job.
  # @return [Array<Job>]
  describe 'jobs_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_health_get
  # Retrieves health information for a job with a specific UUID.
  # If a job UUID is supplied that corresponds to a deleted or non-running job, or the user does not have &#39;permit read&#39; on the job that they requested health for, the health score will not be in the result.
  # @param ids List of job UUIDs separated by commas.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [JobHealth]
  describe 'jobs_health_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_post
  # Creates a new job.
  # Creates a new job from the Job object passed in the POST body. The only required property in the request object is `fqn` ([Fully Qualified Name](http://docs.apcera.com/reference/glossary/#fqn)).
  # @param job An object that defines the properties of the new job. The only required parameter is `fqn`.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Job]
  describe 'jobs_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_routes_endpoint_get
  # Returns a map of the specified endpoint to an array of job UUIDs that are assigned to the endpoint.
  # 
  # @param endpoint Base64-encoded endpoint URL.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Hash<String, Array<String>>]
  describe 'jobs_routes_endpoint_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_routes_get
  # Returns a list of all route endpoints that each map to an array of job UUIDs assigned to the endpoint.
  # Returns a list of job routes.  
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Hash<String, Array<String>>]
  describe 'jobs_routes_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_compliance_get
  # Checks the specified job for policy compliance.
  # Checks the specified job for policy compliance. It checks job routes, bindings, resources, etc. for any violations according to current policy.
  # @param uuid UUID of the job to check for compliance.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'jobs_uuid_compliance_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_delete
  # Deletes the specified job.
  # Deletes the specified job.
  # @param uuid UUID of the job to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'jobs_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_files_path_get
  # Returns information about an instance&#39;s underlying file system.
  # Returns information about an instance&#39;s underlying file system.
  # @param uuid UUID of the job whose file system information should be retrieved.
  # @param path The path to the root folder for which to generate the folder/file listing. For example, `/jobs/&lt;uuid&gt;/files/` returns a listing for the instance&#39;s root folder, and `/jobs/&lt;uuid&gt;/files/app` returns a list of the instance&#39;s `/app` folder. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Array<FileListing>]
  describe 'jobs_uuid_files_path_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_get
  # Returns details about the specified job.
  # Returns details about the specified job.
  # @param uuid UUID of the job to fetch.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Job]
  describe 'jobs_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_instances_get
  # Returns instances from the health manager for a given job UUID.
  # Returns instances from the health manager for a given job UUID.
  # @param uuid UUID of the job.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'jobs_uuid_instances_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_instances_instance_uuid_delete
  # Stop a given instance of a job.
  # Issues a stop request to the specified job instance.
  # @param uuid UUID of the job.
  # @param instance_uuid UUID of the job instance to stop.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'jobs_uuid_instances_instance_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_logs_drains_drain_uuid_delete
  # Deletes a log drain from a job.
  # Deletes the specified log drain from the specified job.
  # @param uuid UUID of the job with the log drain to delete.
  # @param drain_uuid UUID of the log drain to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Drain]
  describe 'jobs_uuid_logs_drains_drain_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_logs_drains_get
  # Returns all log drains for the specified job.
  # Returns all configured log drains for the specified job.
  # @param uuid UUID of the job to retrieve log drains for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Drain]
  describe 'jobs_uuid_logs_drains_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_logs_drains_post
  # Creates a log drain on the specified job.
  # Creates a log drain on the specified job from the `drain` parameter in the request body.
  # @param uuid UUID of the job.
  # @param [Hash] opts the optional parameters
  # @option opts [Drain] :drain Drain object to add to job.
  # @option opts [String] :authorization 
  # @return [Drain]
  describe 'jobs_uuid_logs_drains_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_logs_get
  # Returns logs for the specified job.
  # Returns logs for the specified job.
  # @param uuid UUID of the job to retrieve logs for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [String]
  describe 'jobs_uuid_logs_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_put
  # Updates a job.
  # Updates the specified job.
  # @param uuid UUID of the job to update.
  # @param job A JSON object describing the full job object to update, including new values for any properties to update on the job.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Job]
  describe 'jobs_uuid_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_tunnel_get
  # Creates a bi-directional tunnel with the job/instance UUID specified.
  # Creates a bi-directional tunnel with the job/instance UUID specified.
  # @param uuid UUID of the job.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'jobs_uuid_tunnel_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for jobs_uuid_tunnel_instance_id_get
  # Creates a bi-directional tunnel with the job/instance UUID specified.
  # Creates a bi-directional tunnel with the job/instance UUID specified.
  # @param uuid UUID of the job.
  # @param instance_id UUID of the job instance.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'jobs_uuid_tunnel_instance_id_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for tasks_uuid_get
  # Returns a list of task events for a given task.
  # Returns the requested Task, which contains a list of task events. A client can poll this endpoint to check the status of a task. Optionally, a client can request a websocket connection over which tasks are streamed in real-time.
  # @param uuid UUID of task.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [String] :time If specified, only task events that occurred after the specified time are returned. If not specified, all task events are returned.
  # @option opts [String] :upgrade Header required to upgrade connection to websocket. Value must be &#39;websocket&#39;.
  # @option opts [String] :connection Header required to upgrade connection to websocket. Value must be &#39;Upgrade&#39;.
  # @option opts [String] :sec_web_socket_key Header required to upgrade connection to websocket. Value is base64-encoded random bytes.
  # @return [Task]
  describe 'tasks_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for unbind_post
  # Removes a service binding from a job.
  # Removes a service binding from a job.
  # @param job An object that specifies the job and service to unbind.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'unbind_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for unlink_post
  # Removes a link between two jobs.
  # Removes a link between two jobs. The binding record is only removed from the `from_job` property of the request object.
  # @param job An object that specifies the two jobs to link and the port to use on the target job.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'unlink_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
