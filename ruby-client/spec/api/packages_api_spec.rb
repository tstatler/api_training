=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PackagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PackagesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PackagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PackagesApi' do
    it 'should create an instact of PackagesApi' do
      @instance.should be_a(SwaggerClient::PackagesApi)
    end
  end

  # unit tests for packages_dependencies_post
  # Returns a list of packages that fulfill the specified dependency type and name for the specified namespace.
  # Returns a list of packages that fulfill the specified dependency type and name for the specified namespace.
  # @param [Hash] opts the optional parameters
  # @option opts [PackageDependsRequest] :targetjob_resource JSON object that identifies the namespace we&#39;re resolving dependencies within, and the package dependencies that need to be fully resolved.
  # @option opts [String] :authorization 
  # @return [Array<Package>]
  describe 'packages_dependencies_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_get
  # Returns a list of packages on the cluster.
  # Returns a list of packages on the cluster, optionally filtered by package name, FQN, UUID or other properties. Pagination is also supported.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :tag List of tags. Only packages with the specified tags are returned.
  # @option opts [Array<String>] :excluded_tags List of excluded tags. Only packages without the specified tags are returned.
  # @option opts [Array<String>] :ids List of package UUIDs. Only packages with specifed UUIDs to return.
  # @option opts [String] :name Local name of package to return.
  # @option opts [String] :fqn FQN of package to return.
  # @option opts [String] :match_partial_fqn If `true`, packages that partially match the FQN specified by `fqn` parameter are returned. If `false` (default) then `fqn` must exactly match an available package.
  # @option opts [String] :package_id UUID of the package to return.
  # @option opts [String] :provides_type Type of packages to return. Valid values are `os`, `package`, `runtime`, or `file`. 
  # @option opts [String] :provides_name Name that describes the packages to return. Value can be an exact package name (&#39;java-1.6&#39; or &#39;ubuntu-13.10&#39;, for example) or a generalized requirement (&#39;linux&#39;, for example).
  # @option opts [String] :authorization 
  # @return [Array<Package>]
  describe 'packages_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_package_uuid_resources_resource_uuid_put
  # Uploads a package resource for the specified package.
  # Uploads a specific package resource to the specified package.
  # @param package_uuid UUID of the package.
  # @param resource_uuid UUID of the resource.
  # @param binary_data Binary package resource (GZIP). The resource&#39;s content length and SHA must match the values specified made in a previous call to [`POST /packages`](#operation--packages-post).
  # @param content_digest 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'packages_package_uuid_resources_resource_uuid_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_post
  # Creates a new package.
  # Creates a new package from the provided JSON object.
  # @param pkg An object that defines the properties of the new package.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Package]
  describe 'packages_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_resources_uuid_get
  # Downloads the specified package&#39;s binary resource.
  # Downloads the specified package&#39;s binary resource.
  # @param uuid UUID of the package.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'packages_resources_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_resources_uuid_put
  # Uploads package resources for the specified package.
  # Uploads package resources for the specified package.
  # @param uuid UUID of the package.
  # @param binary_data Binary package resource (GZIP). The resource&#39;s content length and SHA must match the values specified made in a previous call to [`POST /packages`](#operation--packages-post).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'packages_resources_uuid_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_uuid_delete
  # Deletes the specified package.
  # Deletes the specified package.
  # @param uuid UUID of the package to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'packages_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_uuid_get
  # Returns the specified package.
  # Returns the specified package.
  # @param uuid UUID of the package.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Package]
  describe 'packages_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for packages_uuid_put
  # Updates the specified package&#39;s properties.
  # Updates the specified package with the properties defined in the provided package object.
  # @param uuid UUID of the package.
  # @param package A Package object containing the updated properties for the specified package.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'packages_uuid_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
