=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instact of DefaultApi' do
      @instance.should be_a(SwaggerClient::DefaultApi)
    end
  end

  # unit tests for audit_get
  # Returns audit log items for the cluster.
  # Returns a list audit log items. You can optionally filter the list by start time, end time, FQN, or event type.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :start_time UNIX timestamp. If specified, only events that occurred on or after the specified time are returned in the response.
  # @option opts [Float] :end_time UNIX timestamp. If specified, only events that occurred on or before the specified time are returned in the response.
  # @option opts [String] :fqn If specified, only events on the resource specified by `fqn` are returned in the response. You can also specify an FQN segment, which may include wildcards for the resource type. For example:\n * `*::/` returns all audit logs for all resource types.\n * `job::/` returns all audit logs for Job resource types. \n * `job::/apcera` returns all audit logs for Job resource types in the `/apcera` namespace and its sub-namespaces. \n * `*::/apcera` returns all audit logs for all resource types in the `/apcera` namespace its sub-namespaces.
  # @option opts [String] :event_type If specified, only events of the specified type are returned in the response.
  # @option opts [String] :authorization 
  # @return [Array<AuditLogItem>]
  describe 'audit_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
