=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::UtilitiesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UtilitiesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::UtilitiesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UtilitiesApi' do
    it 'should create an instact of UtilitiesApi' do
      @instance.should be_a(SwaggerClient::UtilitiesApi)
    end
  end

  # unit tests for apc_download_platform_get
  # Downloads the APC utility.
  # Downloads the APC command-line utility for the specified platform.
  # @param platform Target platform. Can be one of the following values: \n * `linux` \n * `osx` \n * `linux_amd64` \n * `osx_amd64` \n * `darwin_amd64` \n * `darwin`
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'apc_download_platform_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for apc_version_get
  # Returns the version of APC available for download.
  # Returns the version of APC available for download from the cluster.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [APCVersionObject]
  describe 'apc_version_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for info_get
  # Returns information about the API server.
  # Returns information about the API server.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Info]
  describe 'info_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for namespace_default_get
  # Returns the default namespace for the currently logged-in user.
  # Returns the default namespace for the currently logged-in user.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Namespace]
  describe 'namespace_default_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for runtimes_get
  # Lists supported workload runtimes.
  # Lists file names and patterns used by APC to determine the appropriate staging pipeline to stage a given workload.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Array<Runtime>]
  describe 'runtimes_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for version_get
  # Returns the version number of the API Server.
  # Returns the version number of the API Server.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [InlineResponse200]
  describe 'version_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
