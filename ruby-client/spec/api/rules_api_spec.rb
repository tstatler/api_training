=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::RulesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'RulesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::RulesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RulesApi' do
    it 'should create an instact of RulesApi' do
      @instance.should be_a(SwaggerClient::RulesApi)
    end
  end

  # unit tests for rules_get
  # Lists all policy rules.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'rules_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for rules_post
  # Creates a new semantic pipeline rule for governing a given provider&#39;s behavior.
  # 
  # @param rule An object that defines the properties of the new rule.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'rules_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for rules_uuid_delete
  # Deletes a policy event rule.
  # 
  # @param uuid UUID of the rule.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'rules_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for rules_uuid_get
  # Returns information about a rule that that controls the behavior of semantic pipelines.
  # Returns information about a rule that that controls the behavior of semantic pipelines.
  # @param uuid UUID of the rule.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Rule]
  describe 'rules_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
