=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ServicesAndBindingsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ServicesAndBindingsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ServicesAndBindingsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ServicesAndBindingsApi' do
    it 'should create an instact of ServicesAndBindingsApi' do
      @instance.should be_a(SwaggerClient::ServicesAndBindingsApi)
    end
  end

  # unit tests for bindings_post
  # Creates a new binding between a job and a service, or between two jobs (a job link).
  # 
  # @param binding An object that defines the properties of the new binding.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Binding]
  describe 'bindings_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for services_get
  # Lists available services.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Array<Service>]
  describe 'services_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for services_post
  # Creates a new service.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @option opts [ServiceRequestObject] :service_request Describes the service to create.
  # @return [Service]
  describe 'services_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for services_uuid_delete
  # Deletes the specified service.
  # 
  # @param uuid UUID of the service.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'services_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for unbind_post
  # Removes a service binding from a job.
  # Removes a service binding from a job.
  # @param job An object that specifies the job and service to unbind.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'unbind_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
