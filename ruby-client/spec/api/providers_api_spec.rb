=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ProvidersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProvidersApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ProvidersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProvidersApi' do
    it 'should create an instact of ProvidersApi' do
      @instance.should be_a(SwaggerClient::ProvidersApi)
    end
  end

  # unit tests for providers_get
  # Returns a list of providers defined on the cluster.
  # Returns a list of providers defined on the cluster.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Array<Provider>]
  describe 'providers_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for providers_post
  # Creates a new provider.
  # Creates a new provider.
  # @param job An object that defines the properties of the new provider.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [Array<Provider>]
  describe 'providers_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for providers_uuid_delete
  # Deletes the specified provider.
  # Deletes the specified provider.
  # @param uuid UUID of the provider to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'providers_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
