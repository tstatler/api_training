=begin
Apcera APIs

REST APIs used to manage an Apcera cluster and its resources. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::StagingPipelinesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'StagingPipelinesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::StagingPipelinesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of StagingPipelinesApi' do
    it 'should create an instact of StagingPipelinesApi' do
      @instance.should be_a(SwaggerClient::StagingPipelinesApi)
    end
  end

  # unit tests for stagingpipelines_get
  # Lists all staging pipelines
  # Lists all staging pipelines. To return a single staging pipeline specify its fully qualified name in the `fqn` query parameter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fqn The fully qualified name the staging pipeline to retrieve.
  # @option opts [String] :authorization 
  # @return [Array<StagingPipeline>]
  describe 'stagingpipelines_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for stagingpipelines_post
  # Creates a new staging pipeline.
  # Creates a new staging pipeline.
  # @param [Hash] opts the optional parameters
  # @option opts [StagingPipeline] :staging_pipeline Staging pipeline object to create.
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'stagingpipelines_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for stagingpipelines_uuid_delete
  # Deletes the specified staging pipeline.
  # 
  # @param uuid UUID of the staging pipeline.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'stagingpipelines_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for stagingpipelines_uuid_get
  # Shows the specified staging pipeline.
  # 
  # @param uuid UUID of the staging pipeline.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'stagingpipelines_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for stagingpipelines_uuid_put
  # Updates the specified staging pipeline.
  # 
  # @param uuid UUID of the staging pipeline.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization 
  # @return [nil]
  describe 'stagingpipelines_uuid_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
